#summary Example of an alternative way for defining actions in bbvfsm.
#labels Featured

==Example==
We will show this feature using a simplified version of the Radio tuner. * [http://code.google.com/p/bbvfsm/wiki/GettingStarted tuner example]

==When should I prefer this Action definition method?==
Hi Lukas, kannst du hier bitte etwas dazu schreiben?

==State Machine definition==

<code lang="java">

public class RadioStateMachineDefinion
		extends
		AbstractStateMachineDefinition<RadioStateMachine, RadioStateMachineDefinion.State, RadioStateMachineDefinion.Event> {

	public enum State {
		Off, // Radio is turned off
		On, // Radio is turned on
		FM, // Playing on FM

	}

	public enum Event {
		TogglePower, // Switch on an off
		ToggleMode, // Switch between AM and FM
	}

	public RadioStateMachineDefinion() {
		this(HistoryType.DEEP, HistoryType.NONE);
	}

	public RadioStateMachineDefinion(final HistoryType historyTypeForOn,
			final HistoryType historyTypeForAM) {
		super(State.Off);
		define();
	}

	@Override
	protected RadioStateMachine createStateMachine(
			final StateMachine<State, Event> driver) {
		return new RadioStateMachine(driver);
	}

	private void define() {

		in(State.Off)
				.on(Event.TogglePower)
				.goTo(State.On)
				.execute(
						RadioStateMachineActions.LogTransitionFromOffToOn.class);
		in(State.Off)
				.executeOnEntry(RadioStateMachineActions.LogOffEntry.class);
		in(State.Off).executeOnExit(RadioStateMachineActions.LogOffExit.class);

		in(State.On)
				.on(Event.TogglePower)
				.goTo(State.Off)
				.execute(
						RadioStateMachineActions.LogTransitionFromOnToOff.class);
		in(State.On).executeOnEntry(RadioStateMachineActions.LogOnEntry.class);
		in(State.On).executeOnExit(RadioStateMachineActions.LogOnExit.class);

	}
}

</code>

==State Machine Implementation==

<code lang="java">
public class RadioStateMachine extends
		AbstractStateMachine<RadioStateMachine, State, Event> {

	private StringBuilder log = new StringBuilder();

	public RadioStateMachine(final StateMachine<State, Event> driver) {
		super(driver);
	}

	public RadioStateMachine() {
		super(null);
	}

	public Void logOffEntry() {
		addOptionalDot();
		log.append("entryOff");
		return null;
	}

	public Void logOnEntry() {
		addOptionalDot();
		log.append("entryOn");
		return null;
	}

	public Void logFMEntry() {
		addOptionalDot();
		log.append("entryFM");
		return null;
	}

	public Void logTransitionFromOffToOn() {
		addOptionalDot();
		log.append("OffToOn");
		return null;
	}

	public Void logOffExit() {
		addOptionalDot();
		log.append("exitOff");
		return null;
	}

	public Void logTransitionFromOnToOff() {
		addOptionalDot();
		log.append("OnToOff");
		return null;
	}

	public Void logOnExit() {
		addOptionalDot();
		log.append("exitOn");
		return null;
	}

	public Void logTransitionFromAMToFM() {
		addOptionalDot();
		log.append("AMtoFM");
		return null;
	}

	public String consumeLog() {
		final String result = log.toString();
		log = new StringBuilder();
		return result;
	}

	void addOptionalDot() {
		if (log.length() > 0) {
			log.append('.');
		}
	}

}
</code>

== Action Definitions ==


<code lang="java">
public class RadioStateMachineActions {

	public static class LogOffEntry implements
			Action<RadioStateMachine, State, Event> {

		@Override
		public void execute(final RadioStateMachine stateMachine,
				final Object... arguments) {

			stateMachine.logOffEntry();
		}

	}

	public static class LogOffExit implements
			Action<RadioStateMachine, State, Event> {

		@Override
		public void execute(final RadioStateMachine stateMachine,
				final Object... arguments) {

			stateMachine.logOffExit();
		}

	}

	public static class LogOnEntry implements
			Action<RadioStateMachine, State, Event> {

		@Override
		public void execute(final RadioStateMachine stateMachine,
				final Object... arguments) {

			stateMachine.logOnEntry();
		}

	}

	public static class LogOnExit implements
			Action<RadioStateMachine, State, Event> {

		@Override
		public void execute(final RadioStateMachine stateMachine,
				final Object... arguments) {

			stateMachine.logOnExit();
		}

	}

	public static class LogTransitionFromOffToOn implements
			Action<RadioStateMachine, State, Event> {

		@Override
		public void execute(final RadioStateMachine stateMachine,
				final Object... arguments) {

			stateMachine.logTransitionFromOffToOn();
		}

	}

	public static class LogTransitionFromOnToOff implements
			Action<RadioStateMachine, State, Event> {

		@Override
		public void execute(final RadioStateMachine stateMachine,
				final Object... arguments) {

			stateMachine.logTransitionFromOnToOff();
		}

	}

}

</code>

== Test Case ==
<code lang="java">
public class RadioAcceptanceTest {

	@Test
	public void radioWhenSimplingTurnOnAndOff() {
		final RadioStateMachineDefinion radioStateMachineDefinion = new RadioStateMachineDefinion();

		final RadioStateMachine radioStateMachine = radioStateMachineDefinion
				.createPassiveStateMachine("radioWhenSimplingTurnOnAndOffThenPlayFM");

		radioStateMachine.start();

		radioStateMachine.fire(Event.TogglePower);
		radioStateMachine.fire(Event.TogglePower);

		radioStateMachine.terminate();

		assertThat(
				radioStateMachine.consumeLog(),
				is(equalTo("entryOff.exitOff.OffToOn.entryOn.exitOn.OnToOff.entryOff.exitOff")));
	}

}

</code>
